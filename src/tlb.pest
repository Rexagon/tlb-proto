WHITESPACE = _{ " " | NEWLINE }
COMMENT    = _{
    ("//" ~ (!NEWLINE ~ ANY)*)
  | ("/*" ~ (!"*/" ~ ANY)* ~ "*/")
}

tlb_scheme      = _{ SOI ~ (constructor ~ ";")* ~ EOI }
tlb_constructor = _{ SOI ~ constructor ~ ";"? ~ EOI }

constructor = { constructor_name ~ generic* ~ field_group_item* ~ "=" ~ output_type }

// Constructor name
constructor_name       =  { ("_" | lc_ident) ~ constructor_tag? }
constructor_tag        = _{
    ("$" ~ (constructor_tag_empty | constructor_tag_binary))
  | ("#" ~ (constructor_tag_empty | constructor_tag_hex))
}
constructor_tag_binary = @{ ident_char+ }
constructor_tag_hex    = @{ ident_char+ }
constructor_tag_empty  = @{ "_" }

// Named type argument
generic = { "{" ~ ident ~ ":" ~ (nat_type | type) ~ "}" }

// Field or constraint or a group of fields in a child cell
field_group_item = {
    (("_" ~ ":")? ~ "^[" ~ field_group_item+ ~ "]")
  | field
  | constraint_expr
}
// Field with name or unnamed
field = { (("_" | ident) ~ ":" ~ field_condition?)? ~ type_expr }
// Optional field which is set only if the specified bit is set
field_condition = { ident ~ "." ~ nat_const ~ "?" }
// Constraint expression
constraint_expr = { "{" ~ constraint_operand ~ constraint_op ~ constraint_operand ~ "}" }
// Comparison operator for constraint expression
constraint_op             = @{ "<=" | "<" | "=" | ">=" | ">" }
constraint_operand        =  {
    constraint_operand_expr
  | constraint_operand_single
}
constraint_operand_single = _{
    nat_const
  | ident
  | neg_constraint_operand
  | ("(" ~ constraint_operand ~ ")")
}
constraint_operand_expr   =  { constraint_operand_single ~ nat_op ~ constraint_operand_single }
neg_constraint_operand    =  { "~" ~ constraint_operand }

// Output type with type parameters substitution
output_type = { uc_ident ~ type_expr* }

// Type-level type
type = @{ "Type" }

// Type expression
type_expr     = {
    nat_expr
  | nat_const
  | nat_type_width
  | nat_type_leq
  | nat_type_less
  | nat_type
  | ident
  | ("(" ~ ident ~ type_expr+ ~ ")")
  | type_in_cell
  | neg_type_expr
  | ("(" ~ type_expr ~ ")")
}
neg_type_expr = { "~" ~ type_expr }
// Type serialized in a child cell
type_in_cell = { "^" ~ type_expr }

// Expression with integer value
nat_expr = { ident ~ nat_op ~ (nat_const | ident) }
// Operator for idents with nat consts
nat_op = @{ "+" | "-" | "*" }

// Alias to uint32
nat_type = @{ "#" }
// N-bit integer
nat_type_width = { "##" ~ (nat_const | ident) }
// Variable integer with at most N bits
nat_type_leq = { "#<=" ~ (nat_const | ident) }
// Variable integer with less than N bits
nat_type_less = { "#<" ~ (nat_const | ident) }
// Constants
nat_const = @{ ASCII_DIGIT+ }

// Field or type ident
ident = @{ lc_ident | uc_ident }
// Ident starting from the lowercase letter
lc_ident = @{ ASCII_ALPHA_LOWER ~ ident_char* }
// Ident starting from the uppercase letter
uc_ident = @{ ASCII_ALPHA_UPPER ~ ident_char* }
// [a-zA-Z0-9_]
ident_char = @{ ASCII_ALPHANUMERIC | "_" }

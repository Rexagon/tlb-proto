WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{
    ("//" ~ (!NEWLINE ~ ANY)*) |
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/")
}

tlb_scheme = _{ SOI ~ (constructor ~ ";")* ~ EOI }
tlb_constructor = _{ SOI ~ constructor ~ ";"? ~ EOI }

constructor = { constructor_name ~ generic* ~ field_group_item* ~ "=" ~ output_type }

// Constructor name
constructor_name = { ("_" | lc_ident) ~ constructor_id? }
constructor_id = _{
	("$" ~ (constructor_id_empty | constructor_id_binary)) |
    ("#" ~ (constructor_id_empty | constructor_id_hex))
}
constructor_id_binary = @{ ident_char+ }
constructor_id_hex = @{ ident_char+ }
constructor_id_empty = @{ "_" }

// Named type argument
generic = { "{" ~ ident ~ ":" ~ (nat_type | type) ~ "}" }

// Field or guard or a group of fields in a child cell
field_group_item = {
    (("_" ~ ":")? ~ "^[" ~ field_group_item+ ~ "]") |
    field |
    guard_expr
}
// Field with name or unnamed
field = { (("_" | ident) ~ ":" ~ field_condition?)? ~ type_expr }
// Optional field which is set only if the specified bit is set
field_condition = { ident ~ "." ~ nat_const ~ "?" }
// Guard expression
guard_expr = { "{" ~ ident ~ guard_expr_operator ~ (nat_const | ident) ~ "}" }
// Comparison operator for guard expression
guard_expr_operator = @{ "<=" | "<" | "=" | ">=" | ">" }

// Output type with type parameters substitution
output_type = { uc_ident ~ type_expr* }


// Type-level type
type = @{ "Type" }

// Type expression
type_expr = {
    nat_const |
    nat_type |
    ident |
    type_in_cell |
    ( "(" ~ (nat_type_width | nat_type_leq | nat_type_less) ~ ")" ) |
    ( "(" ~ nat_expr ~ ")" ) |
    ( "(" ~ ident ~ type_expr* ~ ")" )
}
// Type serialized in a child cell
type_in_cell = { "^" ~ type_expr }

// Expression with integer value
nat_expr = { ident ~ nat_expr_operator ~ (nat_const | ident) }
// Operator for idents with nat consts
nat_expr_operator = @{ "+" | "-" | "*" | "/" }

// Alias to uint32
nat_type = @{ "#" }
// N-bit integer
nat_type_width = { "##" ~ (nat_const | ident) }
// Variable integer with at most N bits
nat_type_leq = { "#<=" ~ (nat_const | ident) }
// Variable integer with less than N bits
nat_type_less = { "#<" ~ (nat_const | ident) }
// Constants
nat_const = @{ ASCII_DIGIT+ }

// Field or type ident
ident = @{ lc_ident | uc_ident }
// Ident starting from the lowercase letter
lc_ident = @{ ASCII_ALPHA_LOWER ~ ident_char* }
// Ident starting from the uppercase letter
uc_ident = @{ ASCII_ALPHA_UPPER ~ ident_char* }
// [a-zA-Z0-9_]
ident_char = @{ ASCII_ALPHANUMERIC | "_" }
